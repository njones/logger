// GENERATED BY ./gen/main.go; DO NOT EDIT THIS FILE
// ~~ This file is not generated by hand ~~
// ~~ generated on: 2020-02-22 04:38:58.6751266 +0000 UTC m=+0.028521401 ~~
package logger

import (
	"bytes"
)

// Maps

var tsFmtMap = map[string]byte{
	"05.000000": 0x10,
	"pm":        0x11,
	"03":        0x12,
	"06":        0x13,
	"01":        0x14,
	"Jan":       0x15,
	"Mon":       0x16,
	"2006":      0x17,
	"MST":       0x18,
	"-0700":     0x19,
	"05":        0x1a,
	"04":        0x1b,
	"15":        0x1c,
	"02":        0x1d,
	"January":   0x1e,
	"Monday":    0x1f,
}

var tsRuneMap = map[rune]string{
	0x10: "05.000000",
	0x11: "pm",
	0x12: "03",
	0x13: "06",
	0x14: "01",
	0x15: "Jan",
	0x16: "Mon",
	0x17: "2006",
	0x18: "MST",
	0x19: "-0700",
	0x1a: "05",
	0x1b: "04",
	0x1c: "15",
	0x1d: "02",
	0x1e: "January",
	0x1f: "Monday",
}

var llMap = map[int]map[logLevel]string{
	0: {
		Info:  "INFO:",
		Warn:  "WARN:",
		Debug: "DEBUG:",
		Error: "ERROR:",
		Trace: "TRACE:",
		Fatal: "FATAL:",
		Panic: "PANIC:",
	},
	1: {
		Info:  "[INFO]",
		Warn:  "[WARN]",
		Debug: "[DEBUG]",
		Error: "[ERROR]",
		Trace: "[TRACE]",
		Fatal: "[FATAL]",
		Panic: "[PANIC]",
	},
	2: {
		Info:  "INF:",
		Warn:  "WRN:",
		Debug: "DBG:",
		Error: "ERR:",
		Trace: "TRC:",
		Fatal: "FAT:",
		Panic: "PAN:",
	},
	3: {
		Info:  "[INF]",
		Warn:  "[WRN]",
		Debug: "[DBG]",
		Error: "[ERR]",
		Trace: "[TRC]",
		Fatal: "[FAT]",
		Panic: "[PAN]",
	},
}

func (ll logLevel) flag() int { return int(ll) }

func (ll logLevel) levelize(display int) levelize {
	return levelize(llMap[display][ll])
}

func (ll logLevel) colorize() colorize {
	m := map[logLevel]string{
		Info:  "\x1b[32m",
		Warn:  "\x1b[33m",
		Debug: "\x1b[36m",
		Error: "\x1b[35m",
		Trace: "\x1b[34m",
		Fatal: "\x1b[31m",
		Panic: "\x1b[31m",
	}
	return colorize(m[ll])
}

// Helper Functions

func duplicate(b *baseLogger) *baseLogger {
	bb := new(baseLogger)
	bb.flags = b.flags
	bb.depth = b.depth
	bb.display = b.display
	bb.suppress = b.suppress
	bb.ts = b.ts
	bb.color = b.color
	bb.prefix = b.prefix
	bb.kv = b.kv
	bb.http = b.http
	bb.out = b.out
	bb.exit = b.exit
	bb.sync = b.sync
	return bb
}

// Standard and Extended Logger Functions

func (b *baseLogger) Print(v ...interface{}) {
	if !hasFlag(b.suppress, Info.flag()) {
		b.print(bPrint, v)
	}
}

func (b *baseLogger) Printf(f string, v ...interface{}) {
	if !hasFlag(b.suppress, Info.flag()) {
		b.print(bPrintf, v, formatize(f))
	}
}

func (b *baseLogger) Println(v ...interface{}) {
	if !hasFlag(b.suppress, Info.flag()) {
		b.print(bPrintln, v)
	}
}

func (b *baseLogger) Info(v ...interface{}) {
	if !hasFlag(b.suppress, Info.flag()) {
		b.print(bPrint, v, Info.levelize(b.display), Info.colorize())
	}
}

func (b *baseLogger) Infof(f string, v ...interface{}) {
	if !hasFlag(b.suppress, Info.flag()) {
		b.print(bPrintf, v, formatize(f), Info.levelize(b.display), Info.colorize())
	}
}

func (b *baseLogger) Infoln(v ...interface{}) {
	if !hasFlag(b.suppress, Info.flag()) {
		b.print(bPrintln, v, Info.levelize(b.display), Info.colorize())
	}
}

func (b *baseLogger) Warn(v ...interface{}) {
	if !hasFlag(b.suppress, Warn.flag()) {
		b.print(bPrint, v, Warn.levelize(b.display), Warn.colorize())
	}
}

func (b *baseLogger) Warnf(f string, v ...interface{}) {
	if !hasFlag(b.suppress, Warn.flag()) {
		b.print(bPrintf, v, formatize(f), Warn.levelize(b.display), Warn.colorize())
	}
}

func (b *baseLogger) Warnln(v ...interface{}) {
	if !hasFlag(b.suppress, Warn.flag()) {
		b.print(bPrintln, v, Warn.levelize(b.display), Warn.colorize())
	}
}

func (b *baseLogger) Debug(v ...interface{}) {
	if !hasFlag(b.suppress, Debug.flag()) {
		b.print(bPrint, v, Debug.levelize(b.display), Debug.colorize())
	}
}

func (b *baseLogger) Debugf(f string, v ...interface{}) {
	if !hasFlag(b.suppress, Debug.flag()) {
		b.print(bPrintf, v, formatize(f), Debug.levelize(b.display), Debug.colorize())
	}
}

func (b *baseLogger) Debugln(v ...interface{}) {
	if !hasFlag(b.suppress, Debug.flag()) {
		b.print(bPrintln, v, Debug.levelize(b.display), Debug.colorize())
	}
}

func (b *baseLogger) Error(v ...interface{}) {
	if !hasFlag(b.suppress, Error.flag()) {
		b.print(bPrint, v, Error.levelize(b.display), Error.colorize())
	}
}

func (b *baseLogger) Errorf(f string, v ...interface{}) {
	if !hasFlag(b.suppress, Error.flag()) {
		b.print(bPrintf, v, formatize(f), Error.levelize(b.display), Error.colorize())
	}
}

func (b *baseLogger) Errorln(v ...interface{}) {
	if !hasFlag(b.suppress, Error.flag()) {
		b.print(bPrintln, v, Error.levelize(b.display), Error.colorize())
	}
}

func (b *baseLogger) Trace(v ...interface{}) {
	if !hasFlag(b.suppress, Trace.flag()) {
		b.print(bPrint, v, Trace.levelize(b.display), Trace.colorize())
	}
}

func (b *baseLogger) Tracef(f string, v ...interface{}) {
	if !hasFlag(b.suppress, Trace.flag()) {
		b.print(bPrintf, v, formatize(f), Trace.levelize(b.display), Trace.colorize())
	}
}

func (b *baseLogger) Traceln(v ...interface{}) {
	if !hasFlag(b.suppress, Trace.flag()) {
		b.print(bPrintln, v, Trace.levelize(b.display), Trace.colorize())
	}
}

func (b *baseLogger) Fatal(v ...interface{}) {
	if !hasFlag(b.suppress, Fatal.flag()) {
		b.print(bPrint, v, Fatal.levelize(b.display), Fatal.colorize())
		b.exit.Func(b.exit.Int)
	}
}

func (b *baseLogger) Fatalf(f string, v ...interface{}) {
	if !hasFlag(b.suppress, Fatal.flag()) {
		b.print(bPrintf, v, formatize(f), Fatal.levelize(b.display), Fatal.colorize())
		b.exit.Func(b.exit.Int)
	}
}

func (b *baseLogger) Fatalln(v ...interface{}) {
	if !hasFlag(b.suppress, Fatal.flag()) {
		b.print(bPrintln, v, Fatal.levelize(b.display), Fatal.colorize())
		b.exit.Func(b.exit.Int)
	}
}

func (b *baseLogger) Panic(v ...interface{}) {
	if !hasFlag(b.suppress, Panic.flag()) {
		b.exit.buf = new(bytes.Buffer)
		b.print(bPrint, v, writeize{b.exit.buf}, Panic.levelize(b.display), Panic.colorize())
		panic(b.exit.buf.String())
	}
}

func (b *baseLogger) Panicf(f string, v ...interface{}) {
	if !hasFlag(b.suppress, Panic.flag()) {
		b.exit.buf = new(bytes.Buffer)
		b.print(bPrintf, v, formatize(f), writeize{b.exit.buf}, Panic.levelize(b.display), Panic.colorize())
		panic(b.exit.buf.String())
	}
}

func (b *baseLogger) Panicln(v ...interface{}) {
	if !hasFlag(b.suppress, Panic.flag()) {
		b.exit.buf = new(bytes.Buffer)
		b.print(bPrintln, v, writeize{b.exit.buf}, Panic.levelize(b.display), Panic.colorize())
		panic(b.exit.buf.String())
	}
}

func (b *baseLogger) HTTPln(v ...interface{}) {
	if !hasFlag(b.suppress, HTTP.flag()) {
		b.print(bPrintln, v, timeize(nil))
	}
}

// Application Logger Function

func (e *onErrLogger) Print(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Print(v...)
	}
	return rtn
}

func (e *onErrLogger) Printf(f string, v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Printf(f, v...)
	}
	return rtn
}

func (e *onErrLogger) Println(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Println(v...)
	}
	return rtn
}

func (e *onErrLogger) Info(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Info(v...)
	}
	return rtn
}

func (e *onErrLogger) Infof(f string, v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Infof(f, v...)
	}
	return rtn
}

func (e *onErrLogger) Infoln(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Infoln(v...)
	}
	return rtn
}

func (e *onErrLogger) Warn(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Warn(v...)
	}
	return rtn
}

func (e *onErrLogger) Warnf(f string, v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Warnf(f, v...)
	}
	return rtn
}

func (e *onErrLogger) Warnln(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Warnln(v...)
	}
	return rtn
}

func (e *onErrLogger) Debug(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Debug(v...)
	}
	return rtn
}

func (e *onErrLogger) Debugf(f string, v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Debugf(f, v...)
	}
	return rtn
}

func (e *onErrLogger) Debugln(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Debugln(v...)
	}
	return rtn
}

func (e *onErrLogger) Error(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Error(v...)
	}
	return rtn
}

func (e *onErrLogger) Errorf(f string, v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Errorf(f, v...)
	}
	return rtn
}

func (e *onErrLogger) Errorln(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Errorln(v...)
	}
	return rtn
}

func (e *onErrLogger) Trace(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Trace(v...)
	}
	return rtn
}

func (e *onErrLogger) Tracef(f string, v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Tracef(f, v...)
	}
	return rtn
}

func (e *onErrLogger) Traceln(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Traceln(v...)
	}
	return rtn
}

func (e *onErrLogger) Fatal(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Fatal(v...)
	}
	return rtn
}

func (e *onErrLogger) Fatalf(f string, v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Fatalf(f, v...)
	}
	return rtn
}

func (e *onErrLogger) Fatalln(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Fatalln(v...)
	}
	return rtn
}

func (e *onErrLogger) Panic(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Panic(v...)
	}
	return rtn
}

func (e *onErrLogger) Panicf(f string, v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Panicf(f, v...)
	}
	return rtn
}

func (e *onErrLogger) Panicln(v ...interface{}) (rtn Return) {
	rtn.err = e.err
	if e.popOnErr(v) {
		e.b.Panicln(v...)
	}
	return rtn
}
